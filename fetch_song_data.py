# -*- coding: utf-8 -*-
"""Fetch_Song_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQr0pYZbtY4UTRCnFvzNuhhyyjRNXOLW
"""

#Code to fetch Song data from Spotify

# before running this code you must pip install pandas, pip install spotipy, pip install fastai

#Libraries Imported

import json
import os
import random
import string
import urllib.parse

import warnings
warnings.filterwarnings('ignore')
import requests

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

from fastai.collab import *
from fastai.tabular import *
import pandas as pd
import numpy as np
import spotipy
import spotipy.util as util
from spotipy.oauth2 import SpotifyClientCredentials
import spotipy.oauth2 as oauth2
import requests

from database import db_operations
import re

db_ops = db_operations("SongData.db")

CLIENT_ID = '3e1c953202b147d48f28a70a6a9b7056'
CLIENT_SECRET = '1228a2599ef3415da3f1c0e0c6d471fc'
username = 'k4fai1h3qbcgjz45ljtae8vmg'
market = ['US']
redirect_uri='http://localhost:8080/callback/'


client_credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager = client_credentials_manager)

track_link = input("Put your track link in here: ")

track_URI = track_link.split("/")[-1].split("?")[0] #Also known as the Song ID

track_info = sp.track(track_URI) #Creates a list of All of the Song Information
name = track_info['name'] 
artist = track_info['album']['artists'][0]['name']

track_audio = sp.audio_features(track_URI)[0]

song_id = track_audio["id"]
danceability = str(track_audio["danceability"])
energy = str(track_audio["energy"])
key = str(track_audio["key"])
loudness = str(track_audio["loudness"])
mode = str(track_audio["mode"])
speechiness = str(track_audio["speechiness"])
acousticness = str(track_audio["acousticness"])
liveness = str(track_audio['liveness'])
valence = str(track_audio['valence'])
tempo = str(track_audio['tempo'])
Instrumentalness = str(track_audio['instrumentalness'])

name = name.replace('\'', 'ยบ')
artist = artist.replace('\'', 'ยบ')

query = '''
SELECT *
FROM Song_Data
WHERE SongID = \''''+song_id+"\';"

test = db_ops.execute_one(query)

if not test:
    query = "INSERT INTO Song_Data VALUES(\'"+song_id+"\', \'"+name+"\', \'"+artist+"\', "+danceability+", "+energy+","+key+","+loudness+","+mode+","+speechiness+","+acousticness+","+Instrumentalness+","+liveness+","+valence+","+tempo+",\'"+track_link+"\');"
    db_ops.execute_one(query)
else:
    print("song already in db")

danceability = track_audio["danceability"]
energy = track_audio["energy"]
#loudness = str(track_audio["loudness"])
speechiness = track_audio["speechiness"]
acousticness = track_audio["acousticness"]
valence = track_audio['valence']
#tempo = str(track_audio['tempo'])
Instrumentalness = track_audio['instrumentalness']

query_value = 0.05

#query based off of curr feature and value

while 1:

    energy_featL = str(energy - query_value)
    energy_featH = str(energy + query_value)

    danceability_featL = str(danceability - query_value)
    danceability_featH = str(danceability + query_value)

    speechiness_featL = str(speechiness - query_value)
    speechiness_featH = str(speechiness + query_value)

    acousticness_featL = str(acousticness - query_value)
    acousticness_featH = str(acousticness + query_value)

    valence_featL = str(valence - query_value)
    valence_featH = str(valence + query_value)

    Instrumentalness_featL = str(Instrumentalness - query_value)
    Instrumentalness_featH = str(Instrumentalness + query_value)

    query = '''
    SELECT Name
    FROM Song_Data
    WHERE Energy >='''+energy_featL+" AND Energy<="+energy_featH+" AND Danceability >="+danceability_featL+" AND Danceability <="+danceability_featH+'''
    AND Speechiness >='''+speechiness_featL+" AND Speechiness <="+speechiness_featH+" AND Acousticness >="+acousticness_featL+" AND Acousticness <="+acousticness_featH+'''
    AND Valence >='''+valence_featL+" AND Valence <="+valence_featH+" AND Instrumentalness >="+Instrumentalness_featL+" AND Instrumentalness <="+Instrumentalness_featH+" LIMIT 6;"
    #set curr to query
    curr = db_ops.execute_one(query)
    print(curr)

    if len(curr) == 6:
        break
    elif len(curr) < 6:
        query_value +=0.01

    print(curr)
